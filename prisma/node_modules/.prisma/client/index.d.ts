
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Startup
 * 
 */
export type Startup = $Result.DefaultSelection<Prisma.$StartupPayload>
/**
 * Model Founder
 * 
 */
export type Founder = $Result.DefaultSelection<Prisma.$FounderPayload>
/**
 * Model Person
 * 
 */
export type Person = $Result.DefaultSelection<Prisma.$PersonPayload>
/**
 * Model Venture
 * 
 */
export type Venture = $Result.DefaultSelection<Prisma.$VenturePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Startups
 * const startups = await prisma.startup.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Startups
   * const startups = await prisma.startup.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs, $Utils.Call<Prisma.TypeMapCb, {
    extArgs: ExtArgs
  }>, ClientOptions>

      /**
   * `prisma.startup`: Exposes CRUD operations for the **Startup** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Startups
    * const startups = await prisma.startup.findMany()
    * ```
    */
  get startup(): Prisma.StartupDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.founder`: Exposes CRUD operations for the **Founder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Founders
    * const founders = await prisma.founder.findMany()
    * ```
    */
  get founder(): Prisma.FounderDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.person`: Exposes CRUD operations for the **Person** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more People
    * const people = await prisma.person.findMany()
    * ```
    */
  get person(): Prisma.PersonDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.venture`: Exposes CRUD operations for the **Venture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Ventures
    * const ventures = await prisma.venture.findMany()
    * ```
    */
  get venture(): Prisma.VentureDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.2.1
   * Query Engine version: 4123509d24aa4dede1e864b46351bf2790323b69
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Startup: 'Startup',
    Founder: 'Founder',
    Person: 'Person',
    Venture: 'Venture'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "startup" | "founder" | "person" | "venture"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Startup: {
        payload: Prisma.$StartupPayload<ExtArgs>
        fields: Prisma.StartupFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StartupFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StartupFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>
          }
          findFirst: {
            args: Prisma.StartupFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StartupFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>
          }
          findMany: {
            args: Prisma.StartupFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>[]
          }
          create: {
            args: Prisma.StartupCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>
          }
          createMany: {
            args: Prisma.StartupCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StartupCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>[]
          }
          delete: {
            args: Prisma.StartupDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>
          }
          update: {
            args: Prisma.StartupUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>
          }
          deleteMany: {
            args: Prisma.StartupDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StartupUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StartupUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>[]
          }
          upsert: {
            args: Prisma.StartupUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StartupPayload>
          }
          aggregate: {
            args: Prisma.StartupAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStartup>
          }
          groupBy: {
            args: Prisma.StartupGroupByArgs<ExtArgs>
            result: $Utils.Optional<StartupGroupByOutputType>[]
          }
          count: {
            args: Prisma.StartupCountArgs<ExtArgs>
            result: $Utils.Optional<StartupCountAggregateOutputType> | number
          }
        }
      }
      Founder: {
        payload: Prisma.$FounderPayload<ExtArgs>
        fields: Prisma.FounderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FounderFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FounderFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          findFirst: {
            args: Prisma.FounderFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FounderFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          findMany: {
            args: Prisma.FounderFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>[]
          }
          create: {
            args: Prisma.FounderCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          createMany: {
            args: Prisma.FounderCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FounderCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>[]
          }
          delete: {
            args: Prisma.FounderDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          update: {
            args: Prisma.FounderUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          deleteMany: {
            args: Prisma.FounderDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FounderUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FounderUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>[]
          }
          upsert: {
            args: Prisma.FounderUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FounderPayload>
          }
          aggregate: {
            args: Prisma.FounderAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFounder>
          }
          groupBy: {
            args: Prisma.FounderGroupByArgs<ExtArgs>
            result: $Utils.Optional<FounderGroupByOutputType>[]
          }
          count: {
            args: Prisma.FounderCountArgs<ExtArgs>
            result: $Utils.Optional<FounderCountAggregateOutputType> | number
          }
        }
      }
      Person: {
        payload: Prisma.$PersonPayload<ExtArgs>
        fields: Prisma.PersonFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findFirst: {
            args: Prisma.PersonFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          findMany: {
            args: Prisma.PersonFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          create: {
            args: Prisma.PersonCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          createMany: {
            args: Prisma.PersonCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          delete: {
            args: Prisma.PersonDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          update: {
            args: Prisma.PersonUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          deleteMany: {
            args: Prisma.PersonDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PersonUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>[]
          }
          upsert: {
            args: Prisma.PersonUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonPayload>
          }
          aggregate: {
            args: Prisma.PersonAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePerson>
          }
          groupBy: {
            args: Prisma.PersonGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonCountArgs<ExtArgs>
            result: $Utils.Optional<PersonCountAggregateOutputType> | number
          }
        }
      }
      Venture: {
        payload: Prisma.$VenturePayload<ExtArgs>
        fields: Prisma.VentureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VentureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VentureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>
          }
          findFirst: {
            args: Prisma.VentureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VentureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>
          }
          findMany: {
            args: Prisma.VentureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>[]
          }
          create: {
            args: Prisma.VentureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>
          }
          createMany: {
            args: Prisma.VentureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.VentureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>[]
          }
          delete: {
            args: Prisma.VentureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>
          }
          update: {
            args: Prisma.VentureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>
          }
          deleteMany: {
            args: Prisma.VentureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.VentureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.VentureUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>[]
          }
          upsert: {
            args: Prisma.VentureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$VenturePayload>
          }
          aggregate: {
            args: Prisma.VentureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateVenture>
          }
          groupBy: {
            args: Prisma.VentureGroupByArgs<ExtArgs>
            result: $Utils.Optional<VentureGroupByOutputType>[]
          }
          count: {
            args: Prisma.VentureCountArgs<ExtArgs>
            result: $Utils.Optional<VentureCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    startup?: StartupOmit
    founder?: FounderOmit
    person?: PersonOmit
    venture?: VentureOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type StartupCountOutputType
   */

  export type StartupCountOutputType = {
    founders: number
  }

  export type StartupCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    founders?: boolean | StartupCountOutputTypeCountFoundersArgs
  }

  // Custom InputTypes
  /**
   * StartupCountOutputType without action
   */
  export type StartupCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StartupCountOutputType
     */
    select?: StartupCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StartupCountOutputType without action
   */
  export type StartupCountOutputTypeCountFoundersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FounderWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Startup
   */

  export type AggregateStartup = {
    _count: StartupCountAggregateOutputType | null
    _min: StartupMinAggregateOutputType | null
    _max: StartupMaxAggregateOutputType | null
  }

  export type StartupMinAggregateOutputType = {
    id: string | null
    name: string | null
    logosrc: string | null
    location: string | null
    description: string | null
    marketType: string | null
    marketIcon: string | null
    typeName: string | null
    typeIcon: string | null
    investmentSerie: string | null
    investmentIcon: string | null
    socialWeb: string | null
    socialLinkedin: string | null
    socialTwitter: string | null
  }

  export type StartupMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logosrc: string | null
    location: string | null
    description: string | null
    marketType: string | null
    marketIcon: string | null
    typeName: string | null
    typeIcon: string | null
    investmentSerie: string | null
    investmentIcon: string | null
    socialWeb: string | null
    socialLinkedin: string | null
    socialTwitter: string | null
  }

  export type StartupCountAggregateOutputType = {
    id: number
    name: number
    logosrc: number
    location: number
    description: number
    marketType: number
    marketIcon: number
    typeName: number
    typeIcon: number
    investmentSerie: number
    investmentIcon: number
    socialWeb: number
    socialLinkedin: number
    socialTwitter: number
    _all: number
  }


  export type StartupMinAggregateInputType = {
    id?: true
    name?: true
    logosrc?: true
    location?: true
    description?: true
    marketType?: true
    marketIcon?: true
    typeName?: true
    typeIcon?: true
    investmentSerie?: true
    investmentIcon?: true
    socialWeb?: true
    socialLinkedin?: true
    socialTwitter?: true
  }

  export type StartupMaxAggregateInputType = {
    id?: true
    name?: true
    logosrc?: true
    location?: true
    description?: true
    marketType?: true
    marketIcon?: true
    typeName?: true
    typeIcon?: true
    investmentSerie?: true
    investmentIcon?: true
    socialWeb?: true
    socialLinkedin?: true
    socialTwitter?: true
  }

  export type StartupCountAggregateInputType = {
    id?: true
    name?: true
    logosrc?: true
    location?: true
    description?: true
    marketType?: true
    marketIcon?: true
    typeName?: true
    typeIcon?: true
    investmentSerie?: true
    investmentIcon?: true
    socialWeb?: true
    socialLinkedin?: true
    socialTwitter?: true
    _all?: true
  }

  export type StartupAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Startup to aggregate.
     */
    where?: StartupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Startups to fetch.
     */
    orderBy?: StartupOrderByWithRelationInput | StartupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StartupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Startups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Startups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Startups
    **/
    _count?: true | StartupCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StartupMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StartupMaxAggregateInputType
  }

  export type GetStartupAggregateType<T extends StartupAggregateArgs> = {
        [P in keyof T & keyof AggregateStartup]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStartup[P]>
      : GetScalarType<T[P], AggregateStartup[P]>
  }




  export type StartupGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StartupWhereInput
    orderBy?: StartupOrderByWithAggregationInput | StartupOrderByWithAggregationInput[]
    by: StartupScalarFieldEnum[] | StartupScalarFieldEnum
    having?: StartupScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StartupCountAggregateInputType | true
    _min?: StartupMinAggregateInputType
    _max?: StartupMaxAggregateInputType
  }

  export type StartupGroupByOutputType = {
    id: string
    name: string
    logosrc: string
    location: string
    description: string
    marketType: string
    marketIcon: string
    typeName: string
    typeIcon: string
    investmentSerie: string | null
    investmentIcon: string | null
    socialWeb: string
    socialLinkedin: string
    socialTwitter: string
    _count: StartupCountAggregateOutputType | null
    _min: StartupMinAggregateOutputType | null
    _max: StartupMaxAggregateOutputType | null
  }

  type GetStartupGroupByPayload<T extends StartupGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StartupGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StartupGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StartupGroupByOutputType[P]>
            : GetScalarType<T[P], StartupGroupByOutputType[P]>
        }
      >
    >


  export type StartupSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logosrc?: boolean
    location?: boolean
    description?: boolean
    marketType?: boolean
    marketIcon?: boolean
    typeName?: boolean
    typeIcon?: boolean
    investmentSerie?: boolean
    investmentIcon?: boolean
    socialWeb?: boolean
    socialLinkedin?: boolean
    socialTwitter?: boolean
    founders?: boolean | Startup$foundersArgs<ExtArgs>
    _count?: boolean | StartupCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["startup"]>

  export type StartupSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logosrc?: boolean
    location?: boolean
    description?: boolean
    marketType?: boolean
    marketIcon?: boolean
    typeName?: boolean
    typeIcon?: boolean
    investmentSerie?: boolean
    investmentIcon?: boolean
    socialWeb?: boolean
    socialLinkedin?: boolean
    socialTwitter?: boolean
  }, ExtArgs["result"]["startup"]>

  export type StartupSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logosrc?: boolean
    location?: boolean
    description?: boolean
    marketType?: boolean
    marketIcon?: boolean
    typeName?: boolean
    typeIcon?: boolean
    investmentSerie?: boolean
    investmentIcon?: boolean
    socialWeb?: boolean
    socialLinkedin?: boolean
    socialTwitter?: boolean
  }, ExtArgs["result"]["startup"]>

  export type StartupSelectScalar = {
    id?: boolean
    name?: boolean
    logosrc?: boolean
    location?: boolean
    description?: boolean
    marketType?: boolean
    marketIcon?: boolean
    typeName?: boolean
    typeIcon?: boolean
    investmentSerie?: boolean
    investmentIcon?: boolean
    socialWeb?: boolean
    socialLinkedin?: boolean
    socialTwitter?: boolean
  }

  export type StartupOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "logosrc" | "location" | "description" | "marketType" | "marketIcon" | "typeName" | "typeIcon" | "investmentSerie" | "investmentIcon" | "socialWeb" | "socialLinkedin" | "socialTwitter", ExtArgs["result"]["startup"]>
  export type StartupInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    founders?: boolean | Startup$foundersArgs<ExtArgs>
    _count?: boolean | StartupCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StartupIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StartupIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StartupPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Startup"
    objects: {
      founders: Prisma.$FounderPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logosrc: string
      location: string
      description: string
      marketType: string
      marketIcon: string
      typeName: string
      typeIcon: string
      investmentSerie: string | null
      investmentIcon: string | null
      socialWeb: string
      socialLinkedin: string
      socialTwitter: string
    }, ExtArgs["result"]["startup"]>
    composites: {}
  }

  type StartupGetPayload<S extends boolean | null | undefined | StartupDefaultArgs> = $Result.GetResult<Prisma.$StartupPayload, S>

  type StartupCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StartupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StartupCountAggregateInputType | true
    }

  export interface StartupDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Startup'], meta: { name: 'Startup' } }
    /**
     * Find zero or one Startup that matches the filter.
     * @param {StartupFindUniqueArgs} args - Arguments to find a Startup
     * @example
     * // Get one Startup
     * const startup = await prisma.startup.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StartupFindUniqueArgs>(args: SelectSubset<T, StartupFindUniqueArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Startup that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StartupFindUniqueOrThrowArgs} args - Arguments to find a Startup
     * @example
     * // Get one Startup
     * const startup = await prisma.startup.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StartupFindUniqueOrThrowArgs>(args: SelectSubset<T, StartupFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Startup that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StartupFindFirstArgs} args - Arguments to find a Startup
     * @example
     * // Get one Startup
     * const startup = await prisma.startup.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StartupFindFirstArgs>(args?: SelectSubset<T, StartupFindFirstArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Startup that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StartupFindFirstOrThrowArgs} args - Arguments to find a Startup
     * @example
     * // Get one Startup
     * const startup = await prisma.startup.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StartupFindFirstOrThrowArgs>(args?: SelectSubset<T, StartupFindFirstOrThrowArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Startups that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StartupFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Startups
     * const startups = await prisma.startup.findMany()
     * 
     * // Get first 10 Startups
     * const startups = await prisma.startup.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const startupWithIdOnly = await prisma.startup.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StartupFindManyArgs>(args?: SelectSubset<T, StartupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Startup.
     * @param {StartupCreateArgs} args - Arguments to create a Startup.
     * @example
     * // Create one Startup
     * const Startup = await prisma.startup.create({
     *   data: {
     *     // ... data to create a Startup
     *   }
     * })
     * 
     */
    create<T extends StartupCreateArgs>(args: SelectSubset<T, StartupCreateArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Startups.
     * @param {StartupCreateManyArgs} args - Arguments to create many Startups.
     * @example
     * // Create many Startups
     * const startup = await prisma.startup.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StartupCreateManyArgs>(args?: SelectSubset<T, StartupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Startups and returns the data saved in the database.
     * @param {StartupCreateManyAndReturnArgs} args - Arguments to create many Startups.
     * @example
     * // Create many Startups
     * const startup = await prisma.startup.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Startups and only return the `id`
     * const startupWithIdOnly = await prisma.startup.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StartupCreateManyAndReturnArgs>(args?: SelectSubset<T, StartupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Startup.
     * @param {StartupDeleteArgs} args - Arguments to delete one Startup.
     * @example
     * // Delete one Startup
     * const Startup = await prisma.startup.delete({
     *   where: {
     *     // ... filter to delete one Startup
     *   }
     * })
     * 
     */
    delete<T extends StartupDeleteArgs>(args: SelectSubset<T, StartupDeleteArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Startup.
     * @param {StartupUpdateArgs} args - Arguments to update one Startup.
     * @example
     * // Update one Startup
     * const startup = await prisma.startup.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StartupUpdateArgs>(args: SelectSubset<T, StartupUpdateArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Startups.
     * @param {StartupDeleteManyArgs} args - Arguments to filter Startups to delete.
     * @example
     * // Delete a few Startups
     * const { count } = await prisma.startup.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StartupDeleteManyArgs>(args?: SelectSubset<T, StartupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Startups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StartupUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Startups
     * const startup = await prisma.startup.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StartupUpdateManyArgs>(args: SelectSubset<T, StartupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Startups and returns the data updated in the database.
     * @param {StartupUpdateManyAndReturnArgs} args - Arguments to update many Startups.
     * @example
     * // Update many Startups
     * const startup = await prisma.startup.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Startups and only return the `id`
     * const startupWithIdOnly = await prisma.startup.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StartupUpdateManyAndReturnArgs>(args: SelectSubset<T, StartupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Startup.
     * @param {StartupUpsertArgs} args - Arguments to update or create a Startup.
     * @example
     * // Update or create a Startup
     * const startup = await prisma.startup.upsert({
     *   create: {
     *     // ... data to create a Startup
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Startup we want to update
     *   }
     * })
     */
    upsert<T extends StartupUpsertArgs>(args: SelectSubset<T, StartupUpsertArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Startups.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StartupCountArgs} args - Arguments to filter Startups to count.
     * @example
     * // Count the number of Startups
     * const count = await prisma.startup.count({
     *   where: {
     *     // ... the filter for the Startups we want to count
     *   }
     * })
    **/
    count<T extends StartupCountArgs>(
      args?: Subset<T, StartupCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StartupCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Startup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StartupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StartupAggregateArgs>(args: Subset<T, StartupAggregateArgs>): Prisma.PrismaPromise<GetStartupAggregateType<T>>

    /**
     * Group by Startup.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StartupGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StartupGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StartupGroupByArgs['orderBy'] }
        : { orderBy?: StartupGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StartupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStartupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Startup model
   */
  readonly fields: StartupFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Startup.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StartupClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    founders<T extends Startup$foundersArgs<ExtArgs> = {}>(args?: Subset<T, Startup$foundersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "findMany", ClientOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Startup model
   */ 
  interface StartupFieldRefs {
    readonly id: FieldRef<"Startup", 'String'>
    readonly name: FieldRef<"Startup", 'String'>
    readonly logosrc: FieldRef<"Startup", 'String'>
    readonly location: FieldRef<"Startup", 'String'>
    readonly description: FieldRef<"Startup", 'String'>
    readonly marketType: FieldRef<"Startup", 'String'>
    readonly marketIcon: FieldRef<"Startup", 'String'>
    readonly typeName: FieldRef<"Startup", 'String'>
    readonly typeIcon: FieldRef<"Startup", 'String'>
    readonly investmentSerie: FieldRef<"Startup", 'String'>
    readonly investmentIcon: FieldRef<"Startup", 'String'>
    readonly socialWeb: FieldRef<"Startup", 'String'>
    readonly socialLinkedin: FieldRef<"Startup", 'String'>
    readonly socialTwitter: FieldRef<"Startup", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Startup findUnique
   */
  export type StartupFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * Filter, which Startup to fetch.
     */
    where: StartupWhereUniqueInput
  }

  /**
   * Startup findUniqueOrThrow
   */
  export type StartupFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * Filter, which Startup to fetch.
     */
    where: StartupWhereUniqueInput
  }

  /**
   * Startup findFirst
   */
  export type StartupFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * Filter, which Startup to fetch.
     */
    where?: StartupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Startups to fetch.
     */
    orderBy?: StartupOrderByWithRelationInput | StartupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Startups.
     */
    cursor?: StartupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Startups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Startups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Startups.
     */
    distinct?: StartupScalarFieldEnum | StartupScalarFieldEnum[]
  }

  /**
   * Startup findFirstOrThrow
   */
  export type StartupFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * Filter, which Startup to fetch.
     */
    where?: StartupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Startups to fetch.
     */
    orderBy?: StartupOrderByWithRelationInput | StartupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Startups.
     */
    cursor?: StartupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Startups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Startups.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Startups.
     */
    distinct?: StartupScalarFieldEnum | StartupScalarFieldEnum[]
  }

  /**
   * Startup findMany
   */
  export type StartupFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * Filter, which Startups to fetch.
     */
    where?: StartupWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Startups to fetch.
     */
    orderBy?: StartupOrderByWithRelationInput | StartupOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Startups.
     */
    cursor?: StartupWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Startups from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Startups.
     */
    skip?: number
    distinct?: StartupScalarFieldEnum | StartupScalarFieldEnum[]
  }

  /**
   * Startup create
   */
  export type StartupCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * The data needed to create a Startup.
     */
    data: XOR<StartupCreateInput, StartupUncheckedCreateInput>
  }

  /**
   * Startup createMany
   */
  export type StartupCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Startups.
     */
    data: StartupCreateManyInput | StartupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Startup createManyAndReturn
   */
  export type StartupCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * The data used to create many Startups.
     */
    data: StartupCreateManyInput | StartupCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Startup update
   */
  export type StartupUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * The data needed to update a Startup.
     */
    data: XOR<StartupUpdateInput, StartupUncheckedUpdateInput>
    /**
     * Choose, which Startup to update.
     */
    where: StartupWhereUniqueInput
  }

  /**
   * Startup updateMany
   */
  export type StartupUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Startups.
     */
    data: XOR<StartupUpdateManyMutationInput, StartupUncheckedUpdateManyInput>
    /**
     * Filter which Startups to update
     */
    where?: StartupWhereInput
  }

  /**
   * Startup updateManyAndReturn
   */
  export type StartupUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * The data used to update Startups.
     */
    data: XOR<StartupUpdateManyMutationInput, StartupUncheckedUpdateManyInput>
    /**
     * Filter which Startups to update
     */
    where?: StartupWhereInput
  }

  /**
   * Startup upsert
   */
  export type StartupUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * The filter to search for the Startup to update in case it exists.
     */
    where: StartupWhereUniqueInput
    /**
     * In case the Startup found by the `where` argument doesn't exist, create a new Startup with this data.
     */
    create: XOR<StartupCreateInput, StartupUncheckedCreateInput>
    /**
     * In case the Startup was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StartupUpdateInput, StartupUncheckedUpdateInput>
  }

  /**
   * Startup delete
   */
  export type StartupDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
    /**
     * Filter which Startup to delete.
     */
    where: StartupWhereUniqueInput
  }

  /**
   * Startup deleteMany
   */
  export type StartupDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Startups to delete
     */
    where?: StartupWhereInput
  }

  /**
   * Startup.founders
   */
  export type Startup$foundersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    where?: FounderWhereInput
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    cursor?: FounderWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FounderScalarFieldEnum | FounderScalarFieldEnum[]
  }

  /**
   * Startup without action
   */
  export type StartupDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Startup
     */
    select?: StartupSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Startup
     */
    omit?: StartupOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StartupInclude<ExtArgs> | null
  }


  /**
   * Model Founder
   */

  export type AggregateFounder = {
    _count: FounderCountAggregateOutputType | null
    _min: FounderMinAggregateOutputType | null
    _max: FounderMaxAggregateOutputType | null
  }

  export type FounderMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    linkFounder: string | null
    startupId: string | null
  }

  export type FounderMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    linkFounder: string | null
    startupId: string | null
  }

  export type FounderCountAggregateOutputType = {
    id: number
    name: number
    image: number
    linkFounder: number
    startupId: number
    _all: number
  }


  export type FounderMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    linkFounder?: true
    startupId?: true
  }

  export type FounderMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    linkFounder?: true
    startupId?: true
  }

  export type FounderCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    linkFounder?: true
    startupId?: true
    _all?: true
  }

  export type FounderAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Founder to aggregate.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Founders
    **/
    _count?: true | FounderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FounderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FounderMaxAggregateInputType
  }

  export type GetFounderAggregateType<T extends FounderAggregateArgs> = {
        [P in keyof T & keyof AggregateFounder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFounder[P]>
      : GetScalarType<T[P], AggregateFounder[P]>
  }




  export type FounderGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FounderWhereInput
    orderBy?: FounderOrderByWithAggregationInput | FounderOrderByWithAggregationInput[]
    by: FounderScalarFieldEnum[] | FounderScalarFieldEnum
    having?: FounderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FounderCountAggregateInputType | true
    _min?: FounderMinAggregateInputType
    _max?: FounderMaxAggregateInputType
  }

  export type FounderGroupByOutputType = {
    id: string
    name: string
    image: string
    linkFounder: string
    startupId: string
    _count: FounderCountAggregateOutputType | null
    _min: FounderMinAggregateOutputType | null
    _max: FounderMaxAggregateOutputType | null
  }

  type GetFounderGroupByPayload<T extends FounderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FounderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FounderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FounderGroupByOutputType[P]>
            : GetScalarType<T[P], FounderGroupByOutputType[P]>
        }
      >
    >


  export type FounderSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    linkFounder?: boolean
    startupId?: boolean
    startup?: boolean | StartupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["founder"]>

  export type FounderSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    linkFounder?: boolean
    startupId?: boolean
    startup?: boolean | StartupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["founder"]>

  export type FounderSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    linkFounder?: boolean
    startupId?: boolean
    startup?: boolean | StartupDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["founder"]>

  export type FounderSelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    linkFounder?: boolean
    startupId?: boolean
  }

  export type FounderOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "image" | "linkFounder" | "startupId", ExtArgs["result"]["founder"]>
  export type FounderInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    startup?: boolean | StartupDefaultArgs<ExtArgs>
  }
  export type FounderIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    startup?: boolean | StartupDefaultArgs<ExtArgs>
  }
  export type FounderIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    startup?: boolean | StartupDefaultArgs<ExtArgs>
  }

  export type $FounderPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Founder"
    objects: {
      startup: Prisma.$StartupPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      image: string
      linkFounder: string
      startupId: string
    }, ExtArgs["result"]["founder"]>
    composites: {}
  }

  type FounderGetPayload<S extends boolean | null | undefined | FounderDefaultArgs> = $Result.GetResult<Prisma.$FounderPayload, S>

  type FounderCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FounderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FounderCountAggregateInputType | true
    }

  export interface FounderDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Founder'], meta: { name: 'Founder' } }
    /**
     * Find zero or one Founder that matches the filter.
     * @param {FounderFindUniqueArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FounderFindUniqueArgs>(args: SelectSubset<T, FounderFindUniqueArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Founder that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FounderFindUniqueOrThrowArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FounderFindUniqueOrThrowArgs>(args: SelectSubset<T, FounderFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Founder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderFindFirstArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FounderFindFirstArgs>(args?: SelectSubset<T, FounderFindFirstArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Founder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderFindFirstOrThrowArgs} args - Arguments to find a Founder
     * @example
     * // Get one Founder
     * const founder = await prisma.founder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FounderFindFirstOrThrowArgs>(args?: SelectSubset<T, FounderFindFirstOrThrowArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Founders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Founders
     * const founders = await prisma.founder.findMany()
     * 
     * // Get first 10 Founders
     * const founders = await prisma.founder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const founderWithIdOnly = await prisma.founder.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FounderFindManyArgs>(args?: SelectSubset<T, FounderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Founder.
     * @param {FounderCreateArgs} args - Arguments to create a Founder.
     * @example
     * // Create one Founder
     * const Founder = await prisma.founder.create({
     *   data: {
     *     // ... data to create a Founder
     *   }
     * })
     * 
     */
    create<T extends FounderCreateArgs>(args: SelectSubset<T, FounderCreateArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Founders.
     * @param {FounderCreateManyArgs} args - Arguments to create many Founders.
     * @example
     * // Create many Founders
     * const founder = await prisma.founder.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FounderCreateManyArgs>(args?: SelectSubset<T, FounderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Founders and returns the data saved in the database.
     * @param {FounderCreateManyAndReturnArgs} args - Arguments to create many Founders.
     * @example
     * // Create many Founders
     * const founder = await prisma.founder.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Founders and only return the `id`
     * const founderWithIdOnly = await prisma.founder.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FounderCreateManyAndReturnArgs>(args?: SelectSubset<T, FounderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Founder.
     * @param {FounderDeleteArgs} args - Arguments to delete one Founder.
     * @example
     * // Delete one Founder
     * const Founder = await prisma.founder.delete({
     *   where: {
     *     // ... filter to delete one Founder
     *   }
     * })
     * 
     */
    delete<T extends FounderDeleteArgs>(args: SelectSubset<T, FounderDeleteArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Founder.
     * @param {FounderUpdateArgs} args - Arguments to update one Founder.
     * @example
     * // Update one Founder
     * const founder = await prisma.founder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FounderUpdateArgs>(args: SelectSubset<T, FounderUpdateArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Founders.
     * @param {FounderDeleteManyArgs} args - Arguments to filter Founders to delete.
     * @example
     * // Delete a few Founders
     * const { count } = await prisma.founder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FounderDeleteManyArgs>(args?: SelectSubset<T, FounderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Founders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Founders
     * const founder = await prisma.founder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FounderUpdateManyArgs>(args: SelectSubset<T, FounderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Founders and returns the data updated in the database.
     * @param {FounderUpdateManyAndReturnArgs} args - Arguments to update many Founders.
     * @example
     * // Update many Founders
     * const founder = await prisma.founder.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Founders and only return the `id`
     * const founderWithIdOnly = await prisma.founder.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FounderUpdateManyAndReturnArgs>(args: SelectSubset<T, FounderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Founder.
     * @param {FounderUpsertArgs} args - Arguments to update or create a Founder.
     * @example
     * // Update or create a Founder
     * const founder = await prisma.founder.upsert({
     *   create: {
     *     // ... data to create a Founder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Founder we want to update
     *   }
     * })
     */
    upsert<T extends FounderUpsertArgs>(args: SelectSubset<T, FounderUpsertArgs<ExtArgs>>): Prisma__FounderClient<$Result.GetResult<Prisma.$FounderPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Founders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderCountArgs} args - Arguments to filter Founders to count.
     * @example
     * // Count the number of Founders
     * const count = await prisma.founder.count({
     *   where: {
     *     // ... the filter for the Founders we want to count
     *   }
     * })
    **/
    count<T extends FounderCountArgs>(
      args?: Subset<T, FounderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FounderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Founder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FounderAggregateArgs>(args: Subset<T, FounderAggregateArgs>): Prisma.PrismaPromise<GetFounderAggregateType<T>>

    /**
     * Group by Founder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FounderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FounderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FounderGroupByArgs['orderBy'] }
        : { orderBy?: FounderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FounderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFounderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Founder model
   */
  readonly fields: FounderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Founder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FounderClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    startup<T extends StartupDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StartupDefaultArgs<ExtArgs>>): Prisma__StartupClient<$Result.GetResult<Prisma.$StartupPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions> | Null, Null, ExtArgs, ClientOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Founder model
   */ 
  interface FounderFieldRefs {
    readonly id: FieldRef<"Founder", 'String'>
    readonly name: FieldRef<"Founder", 'String'>
    readonly image: FieldRef<"Founder", 'String'>
    readonly linkFounder: FieldRef<"Founder", 'String'>
    readonly startupId: FieldRef<"Founder", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Founder findUnique
   */
  export type FounderFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where: FounderWhereUniqueInput
  }

  /**
   * Founder findUniqueOrThrow
   */
  export type FounderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where: FounderWhereUniqueInput
  }

  /**
   * Founder findFirst
   */
  export type FounderFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Founders.
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Founders.
     */
    distinct?: FounderScalarFieldEnum | FounderScalarFieldEnum[]
  }

  /**
   * Founder findFirstOrThrow
   */
  export type FounderFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * Filter, which Founder to fetch.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Founders.
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Founders.
     */
    distinct?: FounderScalarFieldEnum | FounderScalarFieldEnum[]
  }

  /**
   * Founder findMany
   */
  export type FounderFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * Filter, which Founders to fetch.
     */
    where?: FounderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Founders to fetch.
     */
    orderBy?: FounderOrderByWithRelationInput | FounderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Founders.
     */
    cursor?: FounderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Founders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Founders.
     */
    skip?: number
    distinct?: FounderScalarFieldEnum | FounderScalarFieldEnum[]
  }

  /**
   * Founder create
   */
  export type FounderCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * The data needed to create a Founder.
     */
    data: XOR<FounderCreateInput, FounderUncheckedCreateInput>
  }

  /**
   * Founder createMany
   */
  export type FounderCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Founders.
     */
    data: FounderCreateManyInput | FounderCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Founder createManyAndReturn
   */
  export type FounderCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * The data used to create many Founders.
     */
    data: FounderCreateManyInput | FounderCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Founder update
   */
  export type FounderUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * The data needed to update a Founder.
     */
    data: XOR<FounderUpdateInput, FounderUncheckedUpdateInput>
    /**
     * Choose, which Founder to update.
     */
    where: FounderWhereUniqueInput
  }

  /**
   * Founder updateMany
   */
  export type FounderUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Founders.
     */
    data: XOR<FounderUpdateManyMutationInput, FounderUncheckedUpdateManyInput>
    /**
     * Filter which Founders to update
     */
    where?: FounderWhereInput
  }

  /**
   * Founder updateManyAndReturn
   */
  export type FounderUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * The data used to update Founders.
     */
    data: XOR<FounderUpdateManyMutationInput, FounderUncheckedUpdateManyInput>
    /**
     * Filter which Founders to update
     */
    where?: FounderWhereInput
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Founder upsert
   */
  export type FounderUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * The filter to search for the Founder to update in case it exists.
     */
    where: FounderWhereUniqueInput
    /**
     * In case the Founder found by the `where` argument doesn't exist, create a new Founder with this data.
     */
    create: XOR<FounderCreateInput, FounderUncheckedCreateInput>
    /**
     * In case the Founder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FounderUpdateInput, FounderUncheckedUpdateInput>
  }

  /**
   * Founder delete
   */
  export type FounderDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
    /**
     * Filter which Founder to delete.
     */
    where: FounderWhereUniqueInput
  }

  /**
   * Founder deleteMany
   */
  export type FounderDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Founders to delete
     */
    where?: FounderWhereInput
  }

  /**
   * Founder without action
   */
  export type FounderDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Founder
     */
    select?: FounderSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Founder
     */
    omit?: FounderOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FounderInclude<ExtArgs> | null
  }


  /**
   * Model Person
   */

  export type AggregatePerson = {
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  export type PersonMinAggregateOutputType = {
    id: string | null
    name: string | null
    role: string | null
    image: string | null
    startup: string | null
    Linkedin: string | null
    Twitter: string | null
  }

  export type PersonMaxAggregateOutputType = {
    id: string | null
    name: string | null
    role: string | null
    image: string | null
    startup: string | null
    Linkedin: string | null
    Twitter: string | null
  }

  export type PersonCountAggregateOutputType = {
    id: number
    name: number
    role: number
    image: number
    startup: number
    Linkedin: number
    Twitter: number
    _all: number
  }


  export type PersonMinAggregateInputType = {
    id?: true
    name?: true
    role?: true
    image?: true
    startup?: true
    Linkedin?: true
    Twitter?: true
  }

  export type PersonMaxAggregateInputType = {
    id?: true
    name?: true
    role?: true
    image?: true
    startup?: true
    Linkedin?: true
    Twitter?: true
  }

  export type PersonCountAggregateInputType = {
    id?: true
    name?: true
    role?: true
    image?: true
    startup?: true
    Linkedin?: true
    Twitter?: true
    _all?: true
  }

  export type PersonAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Person to aggregate.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned People
    **/
    _count?: true | PersonCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonMaxAggregateInputType
  }

  export type GetPersonAggregateType<T extends PersonAggregateArgs> = {
        [P in keyof T & keyof AggregatePerson]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePerson[P]>
      : GetScalarType<T[P], AggregatePerson[P]>
  }




  export type PersonGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonWhereInput
    orderBy?: PersonOrderByWithAggregationInput | PersonOrderByWithAggregationInput[]
    by: PersonScalarFieldEnum[] | PersonScalarFieldEnum
    having?: PersonScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonCountAggregateInputType | true
    _min?: PersonMinAggregateInputType
    _max?: PersonMaxAggregateInputType
  }

  export type PersonGroupByOutputType = {
    id: string
    name: string
    role: string
    image: string
    startup: string
    Linkedin: string
    Twitter: string
    _count: PersonCountAggregateOutputType | null
    _min: PersonMinAggregateOutputType | null
    _max: PersonMaxAggregateOutputType | null
  }

  type GetPersonGroupByPayload<T extends PersonGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonGroupByOutputType[P]>
            : GetScalarType<T[P], PersonGroupByOutputType[P]>
        }
      >
    >


  export type PersonSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    image?: boolean
    startup?: boolean
    Linkedin?: boolean
    Twitter?: boolean
  }, ExtArgs["result"]["person"]>

  export type PersonSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    image?: boolean
    startup?: boolean
    Linkedin?: boolean
    Twitter?: boolean
  }, ExtArgs["result"]["person"]>

  export type PersonSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    role?: boolean
    image?: boolean
    startup?: boolean
    Linkedin?: boolean
    Twitter?: boolean
  }, ExtArgs["result"]["person"]>

  export type PersonSelectScalar = {
    id?: boolean
    name?: boolean
    role?: boolean
    image?: boolean
    startup?: boolean
    Linkedin?: boolean
    Twitter?: boolean
  }

  export type PersonOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "role" | "image" | "startup" | "Linkedin" | "Twitter", ExtArgs["result"]["person"]>

  export type $PersonPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Person"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      role: string
      image: string
      startup: string
      Linkedin: string
      Twitter: string
    }, ExtArgs["result"]["person"]>
    composites: {}
  }

  type PersonGetPayload<S extends boolean | null | undefined | PersonDefaultArgs> = $Result.GetResult<Prisma.$PersonPayload, S>

  type PersonCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PersonFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PersonCountAggregateInputType | true
    }

  export interface PersonDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Person'], meta: { name: 'Person' } }
    /**
     * Find zero or one Person that matches the filter.
     * @param {PersonFindUniqueArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonFindUniqueArgs>(args: SelectSubset<T, PersonFindUniqueArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Person that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PersonFindUniqueOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Person that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonFindFirstArgs>(args?: SelectSubset<T, PersonFindFirstArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Person that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindFirstOrThrowArgs} args - Arguments to find a Person
     * @example
     * // Get one Person
     * const person = await prisma.person.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more People that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all People
     * const people = await prisma.person.findMany()
     * 
     * // Get first 10 People
     * const people = await prisma.person.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personWithIdOnly = await prisma.person.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonFindManyArgs>(args?: SelectSubset<T, PersonFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Person.
     * @param {PersonCreateArgs} args - Arguments to create a Person.
     * @example
     * // Create one Person
     * const Person = await prisma.person.create({
     *   data: {
     *     // ... data to create a Person
     *   }
     * })
     * 
     */
    create<T extends PersonCreateArgs>(args: SelectSubset<T, PersonCreateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many People.
     * @param {PersonCreateManyArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonCreateManyArgs>(args?: SelectSubset<T, PersonCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many People and returns the data saved in the database.
     * @param {PersonCreateManyAndReturnArgs} args - Arguments to create many People.
     * @example
     * // Create many People
     * const person = await prisma.person.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many People and only return the `id`
     * const personWithIdOnly = await prisma.person.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Person.
     * @param {PersonDeleteArgs} args - Arguments to delete one Person.
     * @example
     * // Delete one Person
     * const Person = await prisma.person.delete({
     *   where: {
     *     // ... filter to delete one Person
     *   }
     * })
     * 
     */
    delete<T extends PersonDeleteArgs>(args: SelectSubset<T, PersonDeleteArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Person.
     * @param {PersonUpdateArgs} args - Arguments to update one Person.
     * @example
     * // Update one Person
     * const person = await prisma.person.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonUpdateArgs>(args: SelectSubset<T, PersonUpdateArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more People.
     * @param {PersonDeleteManyArgs} args - Arguments to filter People to delete.
     * @example
     * // Delete a few People
     * const { count } = await prisma.person.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonDeleteManyArgs>(args?: SelectSubset<T, PersonDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many People
     * const person = await prisma.person.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonUpdateManyArgs>(args: SelectSubset<T, PersonUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more People and returns the data updated in the database.
     * @param {PersonUpdateManyAndReturnArgs} args - Arguments to update many People.
     * @example
     * // Update many People
     * const person = await prisma.person.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more People and only return the `id`
     * const personWithIdOnly = await prisma.person.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PersonUpdateManyAndReturnArgs>(args: SelectSubset<T, PersonUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Person.
     * @param {PersonUpsertArgs} args - Arguments to update or create a Person.
     * @example
     * // Update or create a Person
     * const person = await prisma.person.upsert({
     *   create: {
     *     // ... data to create a Person
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Person we want to update
     *   }
     * })
     */
    upsert<T extends PersonUpsertArgs>(args: SelectSubset<T, PersonUpsertArgs<ExtArgs>>): Prisma__PersonClient<$Result.GetResult<Prisma.$PersonPayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of People.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonCountArgs} args - Arguments to filter People to count.
     * @example
     * // Count the number of People
     * const count = await prisma.person.count({
     *   where: {
     *     // ... the filter for the People we want to count
     *   }
     * })
    **/
    count<T extends PersonCountArgs>(
      args?: Subset<T, PersonCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonAggregateArgs>(args: Subset<T, PersonAggregateArgs>): Prisma.PrismaPromise<GetPersonAggregateType<T>>

    /**
     * Group by Person.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonGroupByArgs['orderBy'] }
        : { orderBy?: PersonGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Person model
   */
  readonly fields: PersonFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Person.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Person model
   */ 
  interface PersonFieldRefs {
    readonly id: FieldRef<"Person", 'String'>
    readonly name: FieldRef<"Person", 'String'>
    readonly role: FieldRef<"Person", 'String'>
    readonly image: FieldRef<"Person", 'String'>
    readonly startup: FieldRef<"Person", 'String'>
    readonly Linkedin: FieldRef<"Person", 'String'>
    readonly Twitter: FieldRef<"Person", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Person findUnique
   */
  export type PersonFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findUniqueOrThrow
   */
  export type PersonFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person findFirst
   */
  export type PersonFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findFirstOrThrow
   */
  export type PersonFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Filter, which Person to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of People.
     */
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person findMany
   */
  export type PersonFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Filter, which People to fetch.
     */
    where?: PersonWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of People to fetch.
     */
    orderBy?: PersonOrderByWithRelationInput | PersonOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing People.
     */
    cursor?: PersonWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` People from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` People.
     */
    skip?: number
    distinct?: PersonScalarFieldEnum | PersonScalarFieldEnum[]
  }

  /**
   * Person create
   */
  export type PersonCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * The data needed to create a Person.
     */
    data: XOR<PersonCreateInput, PersonUncheckedCreateInput>
  }

  /**
   * Person createMany
   */
  export type PersonCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Person createManyAndReturn
   */
  export type PersonCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * The data used to create many People.
     */
    data: PersonCreateManyInput | PersonCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Person update
   */
  export type PersonUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * The data needed to update a Person.
     */
    data: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
    /**
     * Choose, which Person to update.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person updateMany
   */
  export type PersonUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
  }

  /**
   * Person updateManyAndReturn
   */
  export type PersonUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * The data used to update People.
     */
    data: XOR<PersonUpdateManyMutationInput, PersonUncheckedUpdateManyInput>
    /**
     * Filter which People to update
     */
    where?: PersonWhereInput
  }

  /**
   * Person upsert
   */
  export type PersonUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * The filter to search for the Person to update in case it exists.
     */
    where: PersonWhereUniqueInput
    /**
     * In case the Person found by the `where` argument doesn't exist, create a new Person with this data.
     */
    create: XOR<PersonCreateInput, PersonUncheckedCreateInput>
    /**
     * In case the Person was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonUpdateInput, PersonUncheckedUpdateInput>
  }

  /**
   * Person delete
   */
  export type PersonDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
    /**
     * Filter which Person to delete.
     */
    where: PersonWhereUniqueInput
  }

  /**
   * Person deleteMany
   */
  export type PersonDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which People to delete
     */
    where?: PersonWhereInput
  }

  /**
   * Person without action
   */
  export type PersonDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Person
     */
    select?: PersonSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Person
     */
    omit?: PersonOmit<ExtArgs> | null
  }


  /**
   * Model Venture
   */

  export type AggregateVenture = {
    _count: VentureCountAggregateOutputType | null
    _min: VentureMinAggregateOutputType | null
    _max: VentureMaxAggregateOutputType | null
  }

  export type VentureMinAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    location: string | null
    website: string | null
  }

  export type VentureMaxAggregateOutputType = {
    id: string | null
    name: string | null
    logo: string | null
    location: string | null
    website: string | null
  }

  export type VentureCountAggregateOutputType = {
    id: number
    name: number
    logo: number
    location: number
    investmentStages: number
    sectors: number
    website: number
    _all: number
  }


  export type VentureMinAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    location?: true
    website?: true
  }

  export type VentureMaxAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    location?: true
    website?: true
  }

  export type VentureCountAggregateInputType = {
    id?: true
    name?: true
    logo?: true
    location?: true
    investmentStages?: true
    sectors?: true
    website?: true
    _all?: true
  }

  export type VentureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Venture to aggregate.
     */
    where?: VentureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventures to fetch.
     */
    orderBy?: VentureOrderByWithRelationInput | VentureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VentureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Ventures
    **/
    _count?: true | VentureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VentureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VentureMaxAggregateInputType
  }

  export type GetVentureAggregateType<T extends VentureAggregateArgs> = {
        [P in keyof T & keyof AggregateVenture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVenture[P]>
      : GetScalarType<T[P], AggregateVenture[P]>
  }




  export type VentureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VentureWhereInput
    orderBy?: VentureOrderByWithAggregationInput | VentureOrderByWithAggregationInput[]
    by: VentureScalarFieldEnum[] | VentureScalarFieldEnum
    having?: VentureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VentureCountAggregateInputType | true
    _min?: VentureMinAggregateInputType
    _max?: VentureMaxAggregateInputType
  }

  export type VentureGroupByOutputType = {
    id: string
    name: string
    logo: string
    location: string
    investmentStages: string[]
    sectors: string[]
    website: string
    _count: VentureCountAggregateOutputType | null
    _min: VentureMinAggregateOutputType | null
    _max: VentureMaxAggregateOutputType | null
  }

  type GetVentureGroupByPayload<T extends VentureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VentureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VentureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VentureGroupByOutputType[P]>
            : GetScalarType<T[P], VentureGroupByOutputType[P]>
        }
      >
    >


  export type VentureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    location?: boolean
    investmentStages?: boolean
    sectors?: boolean
    website?: boolean
  }, ExtArgs["result"]["venture"]>

  export type VentureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    location?: boolean
    investmentStages?: boolean
    sectors?: boolean
    website?: boolean
  }, ExtArgs["result"]["venture"]>

  export type VentureSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    logo?: boolean
    location?: boolean
    investmentStages?: boolean
    sectors?: boolean
    website?: boolean
  }, ExtArgs["result"]["venture"]>

  export type VentureSelectScalar = {
    id?: boolean
    name?: boolean
    logo?: boolean
    location?: boolean
    investmentStages?: boolean
    sectors?: boolean
    website?: boolean
  }

  export type VentureOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "logo" | "location" | "investmentStages" | "sectors" | "website", ExtArgs["result"]["venture"]>

  export type $VenturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Venture"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      logo: string
      location: string
      investmentStages: string[]
      sectors: string[]
      website: string
    }, ExtArgs["result"]["venture"]>
    composites: {}
  }

  type VentureGetPayload<S extends boolean | null | undefined | VentureDefaultArgs> = $Result.GetResult<Prisma.$VenturePayload, S>

  type VentureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<VentureFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: VentureCountAggregateInputType | true
    }

  export interface VentureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Venture'], meta: { name: 'Venture' } }
    /**
     * Find zero or one Venture that matches the filter.
     * @param {VentureFindUniqueArgs} args - Arguments to find a Venture
     * @example
     * // Get one Venture
     * const venture = await prisma.venture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends VentureFindUniqueArgs>(args: SelectSubset<T, VentureFindUniqueArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "findUnique", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find one Venture that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {VentureFindUniqueOrThrowArgs} args - Arguments to find a Venture
     * @example
     * // Get one Venture
     * const venture = await prisma.venture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends VentureFindUniqueOrThrowArgs>(args: SelectSubset<T, VentureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "findUniqueOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find the first Venture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentureFindFirstArgs} args - Arguments to find a Venture
     * @example
     * // Get one Venture
     * const venture = await prisma.venture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends VentureFindFirstArgs>(args?: SelectSubset<T, VentureFindFirstArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "findFirst", ClientOptions> | null, null, ExtArgs, ClientOptions>

    /**
     * Find the first Venture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentureFindFirstOrThrowArgs} args - Arguments to find a Venture
     * @example
     * // Get one Venture
     * const venture = await prisma.venture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends VentureFindFirstOrThrowArgs>(args?: SelectSubset<T, VentureFindFirstOrThrowArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "findFirstOrThrow", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Find zero or more Ventures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Ventures
     * const ventures = await prisma.venture.findMany()
     * 
     * // Get first 10 Ventures
     * const ventures = await prisma.venture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const ventureWithIdOnly = await prisma.venture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends VentureFindManyArgs>(args?: SelectSubset<T, VentureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "findMany", ClientOptions>>

    /**
     * Create a Venture.
     * @param {VentureCreateArgs} args - Arguments to create a Venture.
     * @example
     * // Create one Venture
     * const Venture = await prisma.venture.create({
     *   data: {
     *     // ... data to create a Venture
     *   }
     * })
     * 
     */
    create<T extends VentureCreateArgs>(args: SelectSubset<T, VentureCreateArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "create", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Create many Ventures.
     * @param {VentureCreateManyArgs} args - Arguments to create many Ventures.
     * @example
     * // Create many Ventures
     * const venture = await prisma.venture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends VentureCreateManyArgs>(args?: SelectSubset<T, VentureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Ventures and returns the data saved in the database.
     * @param {VentureCreateManyAndReturnArgs} args - Arguments to create many Ventures.
     * @example
     * // Create many Ventures
     * const venture = await prisma.venture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Ventures and only return the `id`
     * const ventureWithIdOnly = await prisma.venture.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends VentureCreateManyAndReturnArgs>(args?: SelectSubset<T, VentureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "createManyAndReturn", ClientOptions>>

    /**
     * Delete a Venture.
     * @param {VentureDeleteArgs} args - Arguments to delete one Venture.
     * @example
     * // Delete one Venture
     * const Venture = await prisma.venture.delete({
     *   where: {
     *     // ... filter to delete one Venture
     *   }
     * })
     * 
     */
    delete<T extends VentureDeleteArgs>(args: SelectSubset<T, VentureDeleteArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "delete", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Update one Venture.
     * @param {VentureUpdateArgs} args - Arguments to update one Venture.
     * @example
     * // Update one Venture
     * const venture = await prisma.venture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends VentureUpdateArgs>(args: SelectSubset<T, VentureUpdateArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "update", ClientOptions>, never, ExtArgs, ClientOptions>

    /**
     * Delete zero or more Ventures.
     * @param {VentureDeleteManyArgs} args - Arguments to filter Ventures to delete.
     * @example
     * // Delete a few Ventures
     * const { count } = await prisma.venture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends VentureDeleteManyArgs>(args?: SelectSubset<T, VentureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Ventures
     * const venture = await prisma.venture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends VentureUpdateManyArgs>(args: SelectSubset<T, VentureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Ventures and returns the data updated in the database.
     * @param {VentureUpdateManyAndReturnArgs} args - Arguments to update many Ventures.
     * @example
     * // Update many Ventures
     * const venture = await prisma.venture.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Ventures and only return the `id`
     * const ventureWithIdOnly = await prisma.venture.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends VentureUpdateManyAndReturnArgs>(args: SelectSubset<T, VentureUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "updateManyAndReturn", ClientOptions>>

    /**
     * Create or update one Venture.
     * @param {VentureUpsertArgs} args - Arguments to update or create a Venture.
     * @example
     * // Update or create a Venture
     * const venture = await prisma.venture.upsert({
     *   create: {
     *     // ... data to create a Venture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Venture we want to update
     *   }
     * })
     */
    upsert<T extends VentureUpsertArgs>(args: SelectSubset<T, VentureUpsertArgs<ExtArgs>>): Prisma__VentureClient<$Result.GetResult<Prisma.$VenturePayload<ExtArgs>, T, "upsert", ClientOptions>, never, ExtArgs, ClientOptions>


    /**
     * Count the number of Ventures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentureCountArgs} args - Arguments to filter Ventures to count.
     * @example
     * // Count the number of Ventures
     * const count = await prisma.venture.count({
     *   where: {
     *     // ... the filter for the Ventures we want to count
     *   }
     * })
    **/
    count<T extends VentureCountArgs>(
      args?: Subset<T, VentureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VentureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Venture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VentureAggregateArgs>(args: Subset<T, VentureAggregateArgs>): Prisma.PrismaPromise<GetVentureAggregateType<T>>

    /**
     * Group by Venture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VentureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VentureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VentureGroupByArgs['orderBy'] }
        : { orderBy?: VentureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VentureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVentureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Venture model
   */
  readonly fields: VentureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Venture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VentureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Venture model
   */ 
  interface VentureFieldRefs {
    readonly id: FieldRef<"Venture", 'String'>
    readonly name: FieldRef<"Venture", 'String'>
    readonly logo: FieldRef<"Venture", 'String'>
    readonly location: FieldRef<"Venture", 'String'>
    readonly investmentStages: FieldRef<"Venture", 'String[]'>
    readonly sectors: FieldRef<"Venture", 'String[]'>
    readonly website: FieldRef<"Venture", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Venture findUnique
   */
  export type VentureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * Filter, which Venture to fetch.
     */
    where: VentureWhereUniqueInput
  }

  /**
   * Venture findUniqueOrThrow
   */
  export type VentureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * Filter, which Venture to fetch.
     */
    where: VentureWhereUniqueInput
  }

  /**
   * Venture findFirst
   */
  export type VentureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * Filter, which Venture to fetch.
     */
    where?: VentureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventures to fetch.
     */
    orderBy?: VentureOrderByWithRelationInput | VentureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventures.
     */
    cursor?: VentureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventures.
     */
    distinct?: VentureScalarFieldEnum | VentureScalarFieldEnum[]
  }

  /**
   * Venture findFirstOrThrow
   */
  export type VentureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * Filter, which Venture to fetch.
     */
    where?: VentureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventures to fetch.
     */
    orderBy?: VentureOrderByWithRelationInput | VentureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Ventures.
     */
    cursor?: VentureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Ventures.
     */
    distinct?: VentureScalarFieldEnum | VentureScalarFieldEnum[]
  }

  /**
   * Venture findMany
   */
  export type VentureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * Filter, which Ventures to fetch.
     */
    where?: VentureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Ventures to fetch.
     */
    orderBy?: VentureOrderByWithRelationInput | VentureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Ventures.
     */
    cursor?: VentureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Ventures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Ventures.
     */
    skip?: number
    distinct?: VentureScalarFieldEnum | VentureScalarFieldEnum[]
  }

  /**
   * Venture create
   */
  export type VentureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * The data needed to create a Venture.
     */
    data: XOR<VentureCreateInput, VentureUncheckedCreateInput>
  }

  /**
   * Venture createMany
   */
  export type VentureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Ventures.
     */
    data: VentureCreateManyInput | VentureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Venture createManyAndReturn
   */
  export type VentureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * The data used to create many Ventures.
     */
    data: VentureCreateManyInput | VentureCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Venture update
   */
  export type VentureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * The data needed to update a Venture.
     */
    data: XOR<VentureUpdateInput, VentureUncheckedUpdateInput>
    /**
     * Choose, which Venture to update.
     */
    where: VentureWhereUniqueInput
  }

  /**
   * Venture updateMany
   */
  export type VentureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Ventures.
     */
    data: XOR<VentureUpdateManyMutationInput, VentureUncheckedUpdateManyInput>
    /**
     * Filter which Ventures to update
     */
    where?: VentureWhereInput
  }

  /**
   * Venture updateManyAndReturn
   */
  export type VentureUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * The data used to update Ventures.
     */
    data: XOR<VentureUpdateManyMutationInput, VentureUncheckedUpdateManyInput>
    /**
     * Filter which Ventures to update
     */
    where?: VentureWhereInput
  }

  /**
   * Venture upsert
   */
  export type VentureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * The filter to search for the Venture to update in case it exists.
     */
    where: VentureWhereUniqueInput
    /**
     * In case the Venture found by the `where` argument doesn't exist, create a new Venture with this data.
     */
    create: XOR<VentureCreateInput, VentureUncheckedCreateInput>
    /**
     * In case the Venture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VentureUpdateInput, VentureUncheckedUpdateInput>
  }

  /**
   * Venture delete
   */
  export type VentureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
    /**
     * Filter which Venture to delete.
     */
    where: VentureWhereUniqueInput
  }

  /**
   * Venture deleteMany
   */
  export type VentureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Ventures to delete
     */
    where?: VentureWhereInput
  }

  /**
   * Venture without action
   */
  export type VentureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Venture
     */
    select?: VentureSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Venture
     */
    omit?: VentureOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StartupScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logosrc: 'logosrc',
    location: 'location',
    description: 'description',
    marketType: 'marketType',
    marketIcon: 'marketIcon',
    typeName: 'typeName',
    typeIcon: 'typeIcon',
    investmentSerie: 'investmentSerie',
    investmentIcon: 'investmentIcon',
    socialWeb: 'socialWeb',
    socialLinkedin: 'socialLinkedin',
    socialTwitter: 'socialTwitter'
  };

  export type StartupScalarFieldEnum = (typeof StartupScalarFieldEnum)[keyof typeof StartupScalarFieldEnum]


  export const FounderScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    linkFounder: 'linkFounder',
    startupId: 'startupId'
  };

  export type FounderScalarFieldEnum = (typeof FounderScalarFieldEnum)[keyof typeof FounderScalarFieldEnum]


  export const PersonScalarFieldEnum: {
    id: 'id',
    name: 'name',
    role: 'role',
    image: 'image',
    startup: 'startup',
    Linkedin: 'Linkedin',
    Twitter: 'Twitter'
  };

  export type PersonScalarFieldEnum = (typeof PersonScalarFieldEnum)[keyof typeof PersonScalarFieldEnum]


  export const VentureScalarFieldEnum: {
    id: 'id',
    name: 'name',
    logo: 'logo',
    location: 'location',
    investmentStages: 'investmentStages',
    sectors: 'sectors',
    website: 'website'
  };

  export type VentureScalarFieldEnum = (typeof VentureScalarFieldEnum)[keyof typeof VentureScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type StartupWhereInput = {
    AND?: StartupWhereInput | StartupWhereInput[]
    OR?: StartupWhereInput[]
    NOT?: StartupWhereInput | StartupWhereInput[]
    id?: StringFilter<"Startup"> | string
    name?: StringFilter<"Startup"> | string
    logosrc?: StringFilter<"Startup"> | string
    location?: StringFilter<"Startup"> | string
    description?: StringFilter<"Startup"> | string
    marketType?: StringFilter<"Startup"> | string
    marketIcon?: StringFilter<"Startup"> | string
    typeName?: StringFilter<"Startup"> | string
    typeIcon?: StringFilter<"Startup"> | string
    investmentSerie?: StringNullableFilter<"Startup"> | string | null
    investmentIcon?: StringNullableFilter<"Startup"> | string | null
    socialWeb?: StringFilter<"Startup"> | string
    socialLinkedin?: StringFilter<"Startup"> | string
    socialTwitter?: StringFilter<"Startup"> | string
    founders?: FounderListRelationFilter
  }

  export type StartupOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logosrc?: SortOrder
    location?: SortOrder
    description?: SortOrder
    marketType?: SortOrder
    marketIcon?: SortOrder
    typeName?: SortOrder
    typeIcon?: SortOrder
    investmentSerie?: SortOrderInput | SortOrder
    investmentIcon?: SortOrderInput | SortOrder
    socialWeb?: SortOrder
    socialLinkedin?: SortOrder
    socialTwitter?: SortOrder
    founders?: FounderOrderByRelationAggregateInput
  }

  export type StartupWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StartupWhereInput | StartupWhereInput[]
    OR?: StartupWhereInput[]
    NOT?: StartupWhereInput | StartupWhereInput[]
    name?: StringFilter<"Startup"> | string
    logosrc?: StringFilter<"Startup"> | string
    location?: StringFilter<"Startup"> | string
    description?: StringFilter<"Startup"> | string
    marketType?: StringFilter<"Startup"> | string
    marketIcon?: StringFilter<"Startup"> | string
    typeName?: StringFilter<"Startup"> | string
    typeIcon?: StringFilter<"Startup"> | string
    investmentSerie?: StringNullableFilter<"Startup"> | string | null
    investmentIcon?: StringNullableFilter<"Startup"> | string | null
    socialWeb?: StringFilter<"Startup"> | string
    socialLinkedin?: StringFilter<"Startup"> | string
    socialTwitter?: StringFilter<"Startup"> | string
    founders?: FounderListRelationFilter
  }, "id" | "id">

  export type StartupOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logosrc?: SortOrder
    location?: SortOrder
    description?: SortOrder
    marketType?: SortOrder
    marketIcon?: SortOrder
    typeName?: SortOrder
    typeIcon?: SortOrder
    investmentSerie?: SortOrderInput | SortOrder
    investmentIcon?: SortOrderInput | SortOrder
    socialWeb?: SortOrder
    socialLinkedin?: SortOrder
    socialTwitter?: SortOrder
    _count?: StartupCountOrderByAggregateInput
    _max?: StartupMaxOrderByAggregateInput
    _min?: StartupMinOrderByAggregateInput
  }

  export type StartupScalarWhereWithAggregatesInput = {
    AND?: StartupScalarWhereWithAggregatesInput | StartupScalarWhereWithAggregatesInput[]
    OR?: StartupScalarWhereWithAggregatesInput[]
    NOT?: StartupScalarWhereWithAggregatesInput | StartupScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Startup"> | string
    name?: StringWithAggregatesFilter<"Startup"> | string
    logosrc?: StringWithAggregatesFilter<"Startup"> | string
    location?: StringWithAggregatesFilter<"Startup"> | string
    description?: StringWithAggregatesFilter<"Startup"> | string
    marketType?: StringWithAggregatesFilter<"Startup"> | string
    marketIcon?: StringWithAggregatesFilter<"Startup"> | string
    typeName?: StringWithAggregatesFilter<"Startup"> | string
    typeIcon?: StringWithAggregatesFilter<"Startup"> | string
    investmentSerie?: StringNullableWithAggregatesFilter<"Startup"> | string | null
    investmentIcon?: StringNullableWithAggregatesFilter<"Startup"> | string | null
    socialWeb?: StringWithAggregatesFilter<"Startup"> | string
    socialLinkedin?: StringWithAggregatesFilter<"Startup"> | string
    socialTwitter?: StringWithAggregatesFilter<"Startup"> | string
  }

  export type FounderWhereInput = {
    AND?: FounderWhereInput | FounderWhereInput[]
    OR?: FounderWhereInput[]
    NOT?: FounderWhereInput | FounderWhereInput[]
    id?: StringFilter<"Founder"> | string
    name?: StringFilter<"Founder"> | string
    image?: StringFilter<"Founder"> | string
    linkFounder?: StringFilter<"Founder"> | string
    startupId?: StringFilter<"Founder"> | string
    startup?: XOR<StartupScalarRelationFilter, StartupWhereInput>
  }

  export type FounderOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    linkFounder?: SortOrder
    startupId?: SortOrder
    startup?: StartupOrderByWithRelationInput
  }

  export type FounderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FounderWhereInput | FounderWhereInput[]
    OR?: FounderWhereInput[]
    NOT?: FounderWhereInput | FounderWhereInput[]
    name?: StringFilter<"Founder"> | string
    image?: StringFilter<"Founder"> | string
    linkFounder?: StringFilter<"Founder"> | string
    startupId?: StringFilter<"Founder"> | string
    startup?: XOR<StartupScalarRelationFilter, StartupWhereInput>
  }, "id" | "id">

  export type FounderOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    linkFounder?: SortOrder
    startupId?: SortOrder
    _count?: FounderCountOrderByAggregateInput
    _max?: FounderMaxOrderByAggregateInput
    _min?: FounderMinOrderByAggregateInput
  }

  export type FounderScalarWhereWithAggregatesInput = {
    AND?: FounderScalarWhereWithAggregatesInput | FounderScalarWhereWithAggregatesInput[]
    OR?: FounderScalarWhereWithAggregatesInput[]
    NOT?: FounderScalarWhereWithAggregatesInput | FounderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Founder"> | string
    name?: StringWithAggregatesFilter<"Founder"> | string
    image?: StringWithAggregatesFilter<"Founder"> | string
    linkFounder?: StringWithAggregatesFilter<"Founder"> | string
    startupId?: StringWithAggregatesFilter<"Founder"> | string
  }

  export type PersonWhereInput = {
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    id?: StringFilter<"Person"> | string
    name?: StringFilter<"Person"> | string
    role?: StringFilter<"Person"> | string
    image?: StringFilter<"Person"> | string
    startup?: StringFilter<"Person"> | string
    Linkedin?: StringFilter<"Person"> | string
    Twitter?: StringFilter<"Person"> | string
  }

  export type PersonOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    image?: SortOrder
    startup?: SortOrder
    Linkedin?: SortOrder
    Twitter?: SortOrder
  }

  export type PersonWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PersonWhereInput | PersonWhereInput[]
    OR?: PersonWhereInput[]
    NOT?: PersonWhereInput | PersonWhereInput[]
    name?: StringFilter<"Person"> | string
    role?: StringFilter<"Person"> | string
    image?: StringFilter<"Person"> | string
    startup?: StringFilter<"Person"> | string
    Linkedin?: StringFilter<"Person"> | string
    Twitter?: StringFilter<"Person"> | string
  }, "id" | "id">

  export type PersonOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    image?: SortOrder
    startup?: SortOrder
    Linkedin?: SortOrder
    Twitter?: SortOrder
    _count?: PersonCountOrderByAggregateInput
    _max?: PersonMaxOrderByAggregateInput
    _min?: PersonMinOrderByAggregateInput
  }

  export type PersonScalarWhereWithAggregatesInput = {
    AND?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    OR?: PersonScalarWhereWithAggregatesInput[]
    NOT?: PersonScalarWhereWithAggregatesInput | PersonScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Person"> | string
    name?: StringWithAggregatesFilter<"Person"> | string
    role?: StringWithAggregatesFilter<"Person"> | string
    image?: StringWithAggregatesFilter<"Person"> | string
    startup?: StringWithAggregatesFilter<"Person"> | string
    Linkedin?: StringWithAggregatesFilter<"Person"> | string
    Twitter?: StringWithAggregatesFilter<"Person"> | string
  }

  export type VentureWhereInput = {
    AND?: VentureWhereInput | VentureWhereInput[]
    OR?: VentureWhereInput[]
    NOT?: VentureWhereInput | VentureWhereInput[]
    id?: StringFilter<"Venture"> | string
    name?: StringFilter<"Venture"> | string
    logo?: StringFilter<"Venture"> | string
    location?: StringFilter<"Venture"> | string
    investmentStages?: StringNullableListFilter<"Venture">
    sectors?: StringNullableListFilter<"Venture">
    website?: StringFilter<"Venture"> | string
  }

  export type VentureOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    location?: SortOrder
    investmentStages?: SortOrder
    sectors?: SortOrder
    website?: SortOrder
  }

  export type VentureWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: VentureWhereInput | VentureWhereInput[]
    OR?: VentureWhereInput[]
    NOT?: VentureWhereInput | VentureWhereInput[]
    name?: StringFilter<"Venture"> | string
    logo?: StringFilter<"Venture"> | string
    location?: StringFilter<"Venture"> | string
    investmentStages?: StringNullableListFilter<"Venture">
    sectors?: StringNullableListFilter<"Venture">
    website?: StringFilter<"Venture"> | string
  }, "id" | "id">

  export type VentureOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    location?: SortOrder
    investmentStages?: SortOrder
    sectors?: SortOrder
    website?: SortOrder
    _count?: VentureCountOrderByAggregateInput
    _max?: VentureMaxOrderByAggregateInput
    _min?: VentureMinOrderByAggregateInput
  }

  export type VentureScalarWhereWithAggregatesInput = {
    AND?: VentureScalarWhereWithAggregatesInput | VentureScalarWhereWithAggregatesInput[]
    OR?: VentureScalarWhereWithAggregatesInput[]
    NOT?: VentureScalarWhereWithAggregatesInput | VentureScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Venture"> | string
    name?: StringWithAggregatesFilter<"Venture"> | string
    logo?: StringWithAggregatesFilter<"Venture"> | string
    location?: StringWithAggregatesFilter<"Venture"> | string
    investmentStages?: StringNullableListFilter<"Venture">
    sectors?: StringNullableListFilter<"Venture">
    website?: StringWithAggregatesFilter<"Venture"> | string
  }

  export type StartupCreateInput = {
    id?: string
    name: string
    logosrc: string
    location: string
    description: string
    marketType: string
    marketIcon: string
    typeName: string
    typeIcon: string
    investmentSerie?: string | null
    investmentIcon?: string | null
    socialWeb: string
    socialLinkedin: string
    socialTwitter: string
    founders?: FounderCreateNestedManyWithoutStartupInput
  }

  export type StartupUncheckedCreateInput = {
    id?: string
    name: string
    logosrc: string
    location: string
    description: string
    marketType: string
    marketIcon: string
    typeName: string
    typeIcon: string
    investmentSerie?: string | null
    investmentIcon?: string | null
    socialWeb: string
    socialLinkedin: string
    socialTwitter: string
    founders?: FounderUncheckedCreateNestedManyWithoutStartupInput
  }

  export type StartupUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logosrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    marketType?: StringFieldUpdateOperationsInput | string
    marketIcon?: StringFieldUpdateOperationsInput | string
    typeName?: StringFieldUpdateOperationsInput | string
    typeIcon?: StringFieldUpdateOperationsInput | string
    investmentSerie?: NullableStringFieldUpdateOperationsInput | string | null
    investmentIcon?: NullableStringFieldUpdateOperationsInput | string | null
    socialWeb?: StringFieldUpdateOperationsInput | string
    socialLinkedin?: StringFieldUpdateOperationsInput | string
    socialTwitter?: StringFieldUpdateOperationsInput | string
    founders?: FounderUpdateManyWithoutStartupNestedInput
  }

  export type StartupUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logosrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    marketType?: StringFieldUpdateOperationsInput | string
    marketIcon?: StringFieldUpdateOperationsInput | string
    typeName?: StringFieldUpdateOperationsInput | string
    typeIcon?: StringFieldUpdateOperationsInput | string
    investmentSerie?: NullableStringFieldUpdateOperationsInput | string | null
    investmentIcon?: NullableStringFieldUpdateOperationsInput | string | null
    socialWeb?: StringFieldUpdateOperationsInput | string
    socialLinkedin?: StringFieldUpdateOperationsInput | string
    socialTwitter?: StringFieldUpdateOperationsInput | string
    founders?: FounderUncheckedUpdateManyWithoutStartupNestedInput
  }

  export type StartupCreateManyInput = {
    id?: string
    name: string
    logosrc: string
    location: string
    description: string
    marketType: string
    marketIcon: string
    typeName: string
    typeIcon: string
    investmentSerie?: string | null
    investmentIcon?: string | null
    socialWeb: string
    socialLinkedin: string
    socialTwitter: string
  }

  export type StartupUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logosrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    marketType?: StringFieldUpdateOperationsInput | string
    marketIcon?: StringFieldUpdateOperationsInput | string
    typeName?: StringFieldUpdateOperationsInput | string
    typeIcon?: StringFieldUpdateOperationsInput | string
    investmentSerie?: NullableStringFieldUpdateOperationsInput | string | null
    investmentIcon?: NullableStringFieldUpdateOperationsInput | string | null
    socialWeb?: StringFieldUpdateOperationsInput | string
    socialLinkedin?: StringFieldUpdateOperationsInput | string
    socialTwitter?: StringFieldUpdateOperationsInput | string
  }

  export type StartupUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logosrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    marketType?: StringFieldUpdateOperationsInput | string
    marketIcon?: StringFieldUpdateOperationsInput | string
    typeName?: StringFieldUpdateOperationsInput | string
    typeIcon?: StringFieldUpdateOperationsInput | string
    investmentSerie?: NullableStringFieldUpdateOperationsInput | string | null
    investmentIcon?: NullableStringFieldUpdateOperationsInput | string | null
    socialWeb?: StringFieldUpdateOperationsInput | string
    socialLinkedin?: StringFieldUpdateOperationsInput | string
    socialTwitter?: StringFieldUpdateOperationsInput | string
  }

  export type FounderCreateInput = {
    id?: string
    name: string
    image: string
    linkFounder: string
    startup: StartupCreateNestedOneWithoutFoundersInput
  }

  export type FounderUncheckedCreateInput = {
    id?: string
    name: string
    image: string
    linkFounder: string
    startupId: string
  }

  export type FounderUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    linkFounder?: StringFieldUpdateOperationsInput | string
    startup?: StartupUpdateOneRequiredWithoutFoundersNestedInput
  }

  export type FounderUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    linkFounder?: StringFieldUpdateOperationsInput | string
    startupId?: StringFieldUpdateOperationsInput | string
  }

  export type FounderCreateManyInput = {
    id?: string
    name: string
    image: string
    linkFounder: string
    startupId: string
  }

  export type FounderUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    linkFounder?: StringFieldUpdateOperationsInput | string
  }

  export type FounderUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    linkFounder?: StringFieldUpdateOperationsInput | string
    startupId?: StringFieldUpdateOperationsInput | string
  }

  export type PersonCreateInput = {
    id?: string
    name: string
    role: string
    image: string
    startup: string
    Linkedin: string
    Twitter: string
  }

  export type PersonUncheckedCreateInput = {
    id?: string
    name: string
    role: string
    image: string
    startup: string
    Linkedin: string
    Twitter: string
  }

  export type PersonUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    startup?: StringFieldUpdateOperationsInput | string
    Linkedin?: StringFieldUpdateOperationsInput | string
    Twitter?: StringFieldUpdateOperationsInput | string
  }

  export type PersonUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    startup?: StringFieldUpdateOperationsInput | string
    Linkedin?: StringFieldUpdateOperationsInput | string
    Twitter?: StringFieldUpdateOperationsInput | string
  }

  export type PersonCreateManyInput = {
    id?: string
    name: string
    role: string
    image: string
    startup: string
    Linkedin: string
    Twitter: string
  }

  export type PersonUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    startup?: StringFieldUpdateOperationsInput | string
    Linkedin?: StringFieldUpdateOperationsInput | string
    Twitter?: StringFieldUpdateOperationsInput | string
  }

  export type PersonUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    startup?: StringFieldUpdateOperationsInput | string
    Linkedin?: StringFieldUpdateOperationsInput | string
    Twitter?: StringFieldUpdateOperationsInput | string
  }

  export type VentureCreateInput = {
    id?: string
    name: string
    logo: string
    location: string
    investmentStages?: VentureCreateinvestmentStagesInput | string[]
    sectors?: VentureCreatesectorsInput | string[]
    website: string
  }

  export type VentureUncheckedCreateInput = {
    id?: string
    name: string
    logo: string
    location: string
    investmentStages?: VentureCreateinvestmentStagesInput | string[]
    sectors?: VentureCreatesectorsInput | string[]
    website: string
  }

  export type VentureUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    investmentStages?: VentureUpdateinvestmentStagesInput | string[]
    sectors?: VentureUpdatesectorsInput | string[]
    website?: StringFieldUpdateOperationsInput | string
  }

  export type VentureUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    investmentStages?: VentureUpdateinvestmentStagesInput | string[]
    sectors?: VentureUpdatesectorsInput | string[]
    website?: StringFieldUpdateOperationsInput | string
  }

  export type VentureCreateManyInput = {
    id?: string
    name: string
    logo: string
    location: string
    investmentStages?: VentureCreateinvestmentStagesInput | string[]
    sectors?: VentureCreatesectorsInput | string[]
    website: string
  }

  export type VentureUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    investmentStages?: VentureUpdateinvestmentStagesInput | string[]
    sectors?: VentureUpdatesectorsInput | string[]
    website?: StringFieldUpdateOperationsInput | string
  }

  export type VentureUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logo?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    investmentStages?: VentureUpdateinvestmentStagesInput | string[]
    sectors?: VentureUpdatesectorsInput | string[]
    website?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type FounderListRelationFilter = {
    every?: FounderWhereInput
    some?: FounderWhereInput
    none?: FounderWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type FounderOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StartupCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logosrc?: SortOrder
    location?: SortOrder
    description?: SortOrder
    marketType?: SortOrder
    marketIcon?: SortOrder
    typeName?: SortOrder
    typeIcon?: SortOrder
    investmentSerie?: SortOrder
    investmentIcon?: SortOrder
    socialWeb?: SortOrder
    socialLinkedin?: SortOrder
    socialTwitter?: SortOrder
  }

  export type StartupMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logosrc?: SortOrder
    location?: SortOrder
    description?: SortOrder
    marketType?: SortOrder
    marketIcon?: SortOrder
    typeName?: SortOrder
    typeIcon?: SortOrder
    investmentSerie?: SortOrder
    investmentIcon?: SortOrder
    socialWeb?: SortOrder
    socialLinkedin?: SortOrder
    socialTwitter?: SortOrder
  }

  export type StartupMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logosrc?: SortOrder
    location?: SortOrder
    description?: SortOrder
    marketType?: SortOrder
    marketIcon?: SortOrder
    typeName?: SortOrder
    typeIcon?: SortOrder
    investmentSerie?: SortOrder
    investmentIcon?: SortOrder
    socialWeb?: SortOrder
    socialLinkedin?: SortOrder
    socialTwitter?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type StartupScalarRelationFilter = {
    is?: StartupWhereInput
    isNot?: StartupWhereInput
  }

  export type FounderCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    linkFounder?: SortOrder
    startupId?: SortOrder
  }

  export type FounderMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    linkFounder?: SortOrder
    startupId?: SortOrder
  }

  export type FounderMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    linkFounder?: SortOrder
    startupId?: SortOrder
  }

  export type PersonCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    image?: SortOrder
    startup?: SortOrder
    Linkedin?: SortOrder
    Twitter?: SortOrder
  }

  export type PersonMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    image?: SortOrder
    startup?: SortOrder
    Linkedin?: SortOrder
    Twitter?: SortOrder
  }

  export type PersonMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    role?: SortOrder
    image?: SortOrder
    startup?: SortOrder
    Linkedin?: SortOrder
    Twitter?: SortOrder
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type VentureCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    location?: SortOrder
    investmentStages?: SortOrder
    sectors?: SortOrder
    website?: SortOrder
  }

  export type VentureMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    location?: SortOrder
    website?: SortOrder
  }

  export type VentureMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    logo?: SortOrder
    location?: SortOrder
    website?: SortOrder
  }

  export type FounderCreateNestedManyWithoutStartupInput = {
    create?: XOR<FounderCreateWithoutStartupInput, FounderUncheckedCreateWithoutStartupInput> | FounderCreateWithoutStartupInput[] | FounderUncheckedCreateWithoutStartupInput[]
    connectOrCreate?: FounderCreateOrConnectWithoutStartupInput | FounderCreateOrConnectWithoutStartupInput[]
    createMany?: FounderCreateManyStartupInputEnvelope
    connect?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
  }

  export type FounderUncheckedCreateNestedManyWithoutStartupInput = {
    create?: XOR<FounderCreateWithoutStartupInput, FounderUncheckedCreateWithoutStartupInput> | FounderCreateWithoutStartupInput[] | FounderUncheckedCreateWithoutStartupInput[]
    connectOrCreate?: FounderCreateOrConnectWithoutStartupInput | FounderCreateOrConnectWithoutStartupInput[]
    createMany?: FounderCreateManyStartupInputEnvelope
    connect?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type FounderUpdateManyWithoutStartupNestedInput = {
    create?: XOR<FounderCreateWithoutStartupInput, FounderUncheckedCreateWithoutStartupInput> | FounderCreateWithoutStartupInput[] | FounderUncheckedCreateWithoutStartupInput[]
    connectOrCreate?: FounderCreateOrConnectWithoutStartupInput | FounderCreateOrConnectWithoutStartupInput[]
    upsert?: FounderUpsertWithWhereUniqueWithoutStartupInput | FounderUpsertWithWhereUniqueWithoutStartupInput[]
    createMany?: FounderCreateManyStartupInputEnvelope
    set?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    disconnect?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    delete?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    connect?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    update?: FounderUpdateWithWhereUniqueWithoutStartupInput | FounderUpdateWithWhereUniqueWithoutStartupInput[]
    updateMany?: FounderUpdateManyWithWhereWithoutStartupInput | FounderUpdateManyWithWhereWithoutStartupInput[]
    deleteMany?: FounderScalarWhereInput | FounderScalarWhereInput[]
  }

  export type FounderUncheckedUpdateManyWithoutStartupNestedInput = {
    create?: XOR<FounderCreateWithoutStartupInput, FounderUncheckedCreateWithoutStartupInput> | FounderCreateWithoutStartupInput[] | FounderUncheckedCreateWithoutStartupInput[]
    connectOrCreate?: FounderCreateOrConnectWithoutStartupInput | FounderCreateOrConnectWithoutStartupInput[]
    upsert?: FounderUpsertWithWhereUniqueWithoutStartupInput | FounderUpsertWithWhereUniqueWithoutStartupInput[]
    createMany?: FounderCreateManyStartupInputEnvelope
    set?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    disconnect?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    delete?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    connect?: FounderWhereUniqueInput | FounderWhereUniqueInput[]
    update?: FounderUpdateWithWhereUniqueWithoutStartupInput | FounderUpdateWithWhereUniqueWithoutStartupInput[]
    updateMany?: FounderUpdateManyWithWhereWithoutStartupInput | FounderUpdateManyWithWhereWithoutStartupInput[]
    deleteMany?: FounderScalarWhereInput | FounderScalarWhereInput[]
  }

  export type StartupCreateNestedOneWithoutFoundersInput = {
    create?: XOR<StartupCreateWithoutFoundersInput, StartupUncheckedCreateWithoutFoundersInput>
    connectOrCreate?: StartupCreateOrConnectWithoutFoundersInput
    connect?: StartupWhereUniqueInput
  }

  export type StartupUpdateOneRequiredWithoutFoundersNestedInput = {
    create?: XOR<StartupCreateWithoutFoundersInput, StartupUncheckedCreateWithoutFoundersInput>
    connectOrCreate?: StartupCreateOrConnectWithoutFoundersInput
    upsert?: StartupUpsertWithoutFoundersInput
    connect?: StartupWhereUniqueInput
    update?: XOR<XOR<StartupUpdateToOneWithWhereWithoutFoundersInput, StartupUpdateWithoutFoundersInput>, StartupUncheckedUpdateWithoutFoundersInput>
  }

  export type VentureCreateinvestmentStagesInput = {
    set: string[]
  }

  export type VentureCreatesectorsInput = {
    set: string[]
  }

  export type VentureUpdateinvestmentStagesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type VentureUpdatesectorsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FounderCreateWithoutStartupInput = {
    id?: string
    name: string
    image: string
    linkFounder: string
  }

  export type FounderUncheckedCreateWithoutStartupInput = {
    id?: string
    name: string
    image: string
    linkFounder: string
  }

  export type FounderCreateOrConnectWithoutStartupInput = {
    where: FounderWhereUniqueInput
    create: XOR<FounderCreateWithoutStartupInput, FounderUncheckedCreateWithoutStartupInput>
  }

  export type FounderCreateManyStartupInputEnvelope = {
    data: FounderCreateManyStartupInput | FounderCreateManyStartupInput[]
    skipDuplicates?: boolean
  }

  export type FounderUpsertWithWhereUniqueWithoutStartupInput = {
    where: FounderWhereUniqueInput
    update: XOR<FounderUpdateWithoutStartupInput, FounderUncheckedUpdateWithoutStartupInput>
    create: XOR<FounderCreateWithoutStartupInput, FounderUncheckedCreateWithoutStartupInput>
  }

  export type FounderUpdateWithWhereUniqueWithoutStartupInput = {
    where: FounderWhereUniqueInput
    data: XOR<FounderUpdateWithoutStartupInput, FounderUncheckedUpdateWithoutStartupInput>
  }

  export type FounderUpdateManyWithWhereWithoutStartupInput = {
    where: FounderScalarWhereInput
    data: XOR<FounderUpdateManyMutationInput, FounderUncheckedUpdateManyWithoutStartupInput>
  }

  export type FounderScalarWhereInput = {
    AND?: FounderScalarWhereInput | FounderScalarWhereInput[]
    OR?: FounderScalarWhereInput[]
    NOT?: FounderScalarWhereInput | FounderScalarWhereInput[]
    id?: StringFilter<"Founder"> | string
    name?: StringFilter<"Founder"> | string
    image?: StringFilter<"Founder"> | string
    linkFounder?: StringFilter<"Founder"> | string
    startupId?: StringFilter<"Founder"> | string
  }

  export type StartupCreateWithoutFoundersInput = {
    id?: string
    name: string
    logosrc: string
    location: string
    description: string
    marketType: string
    marketIcon: string
    typeName: string
    typeIcon: string
    investmentSerie?: string | null
    investmentIcon?: string | null
    socialWeb: string
    socialLinkedin: string
    socialTwitter: string
  }

  export type StartupUncheckedCreateWithoutFoundersInput = {
    id?: string
    name: string
    logosrc: string
    location: string
    description: string
    marketType: string
    marketIcon: string
    typeName: string
    typeIcon: string
    investmentSerie?: string | null
    investmentIcon?: string | null
    socialWeb: string
    socialLinkedin: string
    socialTwitter: string
  }

  export type StartupCreateOrConnectWithoutFoundersInput = {
    where: StartupWhereUniqueInput
    create: XOR<StartupCreateWithoutFoundersInput, StartupUncheckedCreateWithoutFoundersInput>
  }

  export type StartupUpsertWithoutFoundersInput = {
    update: XOR<StartupUpdateWithoutFoundersInput, StartupUncheckedUpdateWithoutFoundersInput>
    create: XOR<StartupCreateWithoutFoundersInput, StartupUncheckedCreateWithoutFoundersInput>
    where?: StartupWhereInput
  }

  export type StartupUpdateToOneWithWhereWithoutFoundersInput = {
    where?: StartupWhereInput
    data: XOR<StartupUpdateWithoutFoundersInput, StartupUncheckedUpdateWithoutFoundersInput>
  }

  export type StartupUpdateWithoutFoundersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logosrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    marketType?: StringFieldUpdateOperationsInput | string
    marketIcon?: StringFieldUpdateOperationsInput | string
    typeName?: StringFieldUpdateOperationsInput | string
    typeIcon?: StringFieldUpdateOperationsInput | string
    investmentSerie?: NullableStringFieldUpdateOperationsInput | string | null
    investmentIcon?: NullableStringFieldUpdateOperationsInput | string | null
    socialWeb?: StringFieldUpdateOperationsInput | string
    socialLinkedin?: StringFieldUpdateOperationsInput | string
    socialTwitter?: StringFieldUpdateOperationsInput | string
  }

  export type StartupUncheckedUpdateWithoutFoundersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    logosrc?: StringFieldUpdateOperationsInput | string
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    marketType?: StringFieldUpdateOperationsInput | string
    marketIcon?: StringFieldUpdateOperationsInput | string
    typeName?: StringFieldUpdateOperationsInput | string
    typeIcon?: StringFieldUpdateOperationsInput | string
    investmentSerie?: NullableStringFieldUpdateOperationsInput | string | null
    investmentIcon?: NullableStringFieldUpdateOperationsInput | string | null
    socialWeb?: StringFieldUpdateOperationsInput | string
    socialLinkedin?: StringFieldUpdateOperationsInput | string
    socialTwitter?: StringFieldUpdateOperationsInput | string
  }

  export type FounderCreateManyStartupInput = {
    id?: string
    name: string
    image: string
    linkFounder: string
  }

  export type FounderUpdateWithoutStartupInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    linkFounder?: StringFieldUpdateOperationsInput | string
  }

  export type FounderUncheckedUpdateWithoutStartupInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    linkFounder?: StringFieldUpdateOperationsInput | string
  }

  export type FounderUncheckedUpdateManyWithoutStartupInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    linkFounder?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}